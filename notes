IMPORTANT THINGS: In react, when you want to create a new component,
rfce is used to output a ready made functional component. 
In react native, rnfes (which stands for react native functional export with stylessheet) 
is used to ouput a ready made component that contains a style sheet.

To refersh the android simulator, click on the phone,
then press rr on the keyboard (press the r keyboard button twice)

In the components View is the same as a div

-----------

Go to: https://docs.expo.io/get-started/installation/

For my installation, i already had node installed, but i needed watchman.

I had to install homebrew from here: https://docs.brew.sh/Installation

Then i updated homebrew and upgraded it.

Then i installed watchman with instructions from here: 
https://facebook.github.io/watchman/docs/install#buildinstall

Then i downloaded android studio manually following this exp tutorial: 
https://docs.expo.io/workflow/android-studio-emulator/

Then  i followed this tutorial to connect my app to android studio: 
https://medium.com/@samailabalap/setting-up-react-native-with-expo-and-android-studio-on-ubuntu-18-04-84340bc2cc3c

Now that i have android studio installed and ready and all the exp requirements ready.

I installed expo-cli via react native here: https://reactnative.dev/docs/environment-setup

    Choose either yarn or npm and then. For this build we are using yarn. 
    In your terminal write:
    -->  yarn global add expo-cli 

Download the folder template (similar to create-react-app but for react native)

    ==> expo init signal-clone-yt

In the termianl you will be given a bunch of options. 

    Press enter on --> blank a minimal app as clean as an empty canvas

Cd into the folder and in the vsc termianl write:

    --> yarn start

Open up android studio app, click on Configure 
and then AVD Manager on the dropdown that shows up to open the AVD Manager.
Click on the play button on the start screen of the AVD 
to start up the virtual android device and give it some time to start up.
Your android simulator will be ready when  
you can click around in the android simulator as if its a real phone.

Go back to the browser expo page, it have a bunch of options. 
Choose run on android device emulator.

Then the app should appear on the android simulator.

Similar to react-router for react webapps, 
for mobile, we use react-navigation to go to different pages/screens in our app.
Go to this site fore more info: https://reactnavigation.org/docs/getting-started/
To use react-navigation type in the vsc terminal:
    
    --> yarn add @react-navigation/native

    --> expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view

In the app.js, import the dependencies, 
and then wrap the whole app with <NavigationContainer> element

In order for the different screens/pages 
to stack on top of each other we have to use the stack navigator library:
https://reactnavigation.org/docs/hello-react-navigation

In the terminal write:

    --> yarn add @react-navigation/stack

Next create the screens folder, which will contain 
the apps different screens.
And inside the screen folder create the login screen

    --> LoginScreen.js (notice that its CamelCase)

Install react native elements. 
Read more here: https://reactnativeelements.com/docs
In terminal write:

    --> yarn add react-native-elements

In LoginScreen add:
    
    --> import {Button, Input, Image} from "react-native-elements";

