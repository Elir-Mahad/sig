IMPORTANT THINGS: In react, when you want to create a new component,
rfce is used to output a ready made functional component. 
In react native, rnfes (which stands for react native functional export with stylessheet) 
is used to ouput a ready made component that contains a style sheet.

On the web, we user react router to go between pages.
On react native we use react native navigation.
In mobile, you have different screens(pages)
that are stacked/layered on top of each other,
so for example: when you swipe back it shows the screen beneath,
and when you swiple forward it goes to the next screen on top.

In react-native element we can specify text as h1,h2,h3 etc elements.
To do that we have to remove 'Text' from the default import of: 
    --> import { StyleSheet, View, Text } from "react-native";
    So it will change to this:
     --> import { StyleSheet, View } from "react-native";
     
Then import 'Text' from react-native-elements like this:
    --> import { Text } from "react-native-elements";
    

To refersh the android simulator, click on the phone,
then press rr on the keyboard (press the r keyboard button twice)

Terminology in react native is a bit different from regular web app terms. 
Below are two lists, the left list has the terms from react native
and the right has their equivalent from react.

    React native -- React
    View = div
    Style = className

In react native, flex-direction:column is a default setting.


-----------

Go to: https://docs.expo.io/get-started/installation/

For my installation, i already had node installed, but i needed watchman.

I had to install homebrew from here: https://docs.brew.sh/Installation

Then i updated homebrew and upgraded it.

Then i installed watchman with instructions from here: 
https://facebook.github.io/watchman/docs/install#buildinstall

Then i downloaded android studio manually following this exp tutorial: 
https://docs.expo.io/workflow/android-studio-emulator/

Then  i followed this tutorial to connect my app to android studio: 
https://medium.com/@samailabalap/setting-up-react-native-with-expo-and-android-studio-on-ubuntu-18-04-84340bc2cc3c

Now that i have android studio installed and ready and all the exp requirements ready.

I installed expo-cli via react native here: https://reactnative.dev/docs/environment-setup

    Choose either yarn or npm and then. For this build we are using yarn. 
    In your terminal write:
    -->  yarn global add expo-cli 

Download the folder template (similar to create-react-app but for react native)

    ==> expo init signal-clone-yt

In the termianl you will be given a bunch of options. 

    Press enter on --> blank a minimal app as clean as an empty canvas

Cd into the folder and in the vsc termianl write:

    --> yarn start

Open up android studio app, click on Configure 
and then AVD Manager on the dropdown that shows up to open the AVD Manager.
Click on the play button on the start screen of the AVD 
to start up the virtual android device and give it some time to start up.
Your android simulator will be ready when  
you can click around in the android simulator as if its a real phone.

Go back to the browser expo page, it have a bunch of options. 
Choose run on android device emulator.

Then the app should appear on the android simulator.

Similar to react-router for react webapps, 
for mobile, we use react-navigation to go to different pages/screens in our app.
Go to this site fore more info: https://reactnavigation.org/docs/getting-started/
To use react-navigation type in the vsc terminal:
    
    --> yarn add @react-navigation/native

    --> expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view

In the app.js, import the dependencies, 
and then wrap the whole app with <NavigationContainer> element

In order for the different screens/pages 
to stack on top of each other we have to use the stack navigator library:
https://reactnavigation.org/docs/hello-react-navigation

In the terminal write:

    --> yarn add @react-navigation/stack

Next create the screens folder, which will contain 
the apps different screens.
And inside the screen folder create the login screen

    --> LoginScreen.js (notice that its CamelCase)

Install react native elements. 
Read more here: https://reactnativeelements.com/docs
In terminal write:

    --> yarn add react-native-elements

In LoginScreen add:
    
    --> import {Button, Input, Image} from "react-native-elements";

---------------PROCESS FOR ADDING CUSTOM FONTS

1.  In the assets folder, create a fonts folder.

2.  Download desired fonts from google fonts.

3.  Move the specific .tff font file, to the fonts folder thats in your assets folder.

4.  Go into the app.js and install the necessary dependencies for making custom fonts work

    In the terminal type:
    --> expo install expo-app-loading

    Import to the app.js:
    --> import * as Font from "expo-font";
        import AppLoading from "expo-app-loading";

5.  Create a function to assynchronously load fonts;
    This function will be above " export default function App() "
    
    Here is an example: 
        --> const getFonts = () =>
                Font.loadAsync({
                    "inconsolate-regular": require("./assets/fonts/Inconsolata-Regular.ttf")
            });

6.  Right under " export default function App() { "
    (i.e, in the beginning of our App functional component)
    we will initialize our fonts to make sure that no error
    happens and to make sure that the fonts load before the 
    app loads.

    The code looks like this (comments about this code is in app.js of hakagure app): 

        --> const [fontsLoaded, setFontsLoaded] = useState(false);

            if (fontsLoaded) {
                return <WelcomeScreen />;
            } else {
                // return (
                <AppLoading
                    //
                    startAsync={getFonts}
                    onFinish={() => setFontsLoaded(true)}
                    onError={console.warn}
                />;
                // );
            }

7. Then in the style sheet, declare where you want to use the custom font.
    Example: 
            welcome_bodyText: {
        --> fontFamily: "inconsolate-regular"
            }

8. The globalScreenOptions and the createStackNavigator command
    must be under the fontsloaded conditional.
    If they they are not, then the globalScreenOptions and the stack
    will not work.
